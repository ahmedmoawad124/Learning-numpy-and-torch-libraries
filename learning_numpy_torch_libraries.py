# -*- coding: utf-8 -*-
"""Learning_numpy_torch_libraries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MfVW2-jQLARUXLIo9puhRAYVnqYeti1e
"""

import numpy as np
'''
# If you use : (from numpy import *), all functions will be loaded into the local namespace. 
For example array([1,2,3]) can then be used.
# If you use : (import numpy), all sub-modules and functions in the numpy module can only be accesses in the numpy.* namespace. 
For example numpy.array([1,2,3]).
# If you use : (import numpy as np), an alias for the namespace will be created. For example np.array([1,2,3]).
'''

import torch

''' *******************************************
    ****************** numpy ****************** 
    *******************************************'''

# Create one-dimentional array (vector) in numpy
a = np.array([1,2,3,4])
b = np.array([1,2,3,4])

# print the array a
print("The array a = ", a)

# print the type array a
print("The type of a is:",type(a))

# Printing array dimensions (axes) 
print("No. of dimensions: ", a.ndim)   # one-dimentional array

# Print the shape of array
print("The Shape of array a: ", a.shape)

print('-'*60)

# Element-wise Addition
add_arrays = a + b
print("Element-wise Addition = ",add_arrays)

# Element-wise Subtraction
sub_arrays = a - b
print("Element-wise Subtraction = ",sub_arrays)

# Element-Wise Multiplication
mul_arrays = a * b
print("Element-Wise Multiplication = ",mul_arrays)

# Element-Wise Division
div_arrays = a / b
print("Element-Wise Division = ",div_arrays)

print('-'*60)

# To reshape the vector a to an array (4 x 1)
a_reshaped = a.reshape(4,1)
print("The array a_reshaped =\n", a_reshaped)
print("The Shape of array a_reshaped: ", a_reshaped.shape)

# To reshape the vector b to an array (2 x 2)
b_reshaped = b.reshape(2,2)
print("The array b_reshaped =\n", b_reshaped)
print("The Shape of array b_reshaped: ", b_reshaped.shape)

# Create N-Dimensional array(ndarray) in Numpy

c = np.array( [[ 1, 2],
               [ 3, 4]] )

d = np.array( [[ 1, 2],
               [ 3, 4]] )

# print the array c
print("The array c =\n", c)

# Print the type of array c
print("The type of c is :", type(c))

# Printing array dimensions (axes)
print("No. of dimensions: ", c.ndim)   # two-dimentional array

# Print the shape of array c
print("The Shape of array c: ", c.shape)

# print the size of array c
'''
# Synatx: numpy.size(arr, axis=None)
# Parameters:
arr: [array_like] Input data.
axis: [int, optional] Axis along which the elements are counted. 
By default, give the total number of elements.
# Returns: [int] Return the number of elements along a given axis.
'''
print("The No. of rows of array c is:",np.size(c,0))
print("The No. of columns of array c is:",np.size(c,1))
print("The total number of elements of array c (No. of rows x No. of columns) = ",np.size(c)) # You can use : (c.size) to do that.

# Print the type of elements in array c
print("Array stores elements of type: ", c.dtype)

print('-'*60)

# Array multiplication (Element-wise multiplication)
print ("Array multiplication:\n", c*d)

# matrix multiplication
print ("Matrix multiplication:\n", c.dot(d))

# Unary operators: Many unary operations are provided as a method of ndarray class.
arr = np.array([[1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]])
 
# maximum element of array
print ("Largest element is:", arr.max())
print ("Row-wise maximum elements:",arr.max(axis = 1))
 
# minimum element of array
print ("Column-wise minimum elements:",arr.min(axis = 0))
 
# sum of array elements
print ("Sum of all array elements:",arr.sum())

# cumulative sum along each row
print ("Cumulative sum along each row:\n",arr.cumsum(axis = 1))

# ones matrix
print ("ones matrix:\n",np.ones((2, 2)))

# zeros matrix
print ("zeros matrix:\n",np.zeros((2, 2)))

# Create 2x2 numpy array of random numbers
print ("array of random numbers:\n",np.random.rand(2, 2))

# Universal functions (ufunc): NumPy provides familiar mathematical functions such as sin, cos, exp, etc.
# create an array of sine values
k = np.array([0, np.pi/2, np.pi])
print ("Sine values of array elements:", np.sin(k))
 
# exponential values
l = np.array([0, 1, 2, 3])
print ("Exponent of array elements:", np.exp(l))
 
# square root of array values
print ("Square root of array elements:", np.sqrt(l))

# The Linear Algebra module of NumPy offers various methods to apply linear algebra on any numpy array.
A = np.array([[6, 1, 1],
              [4, -2, 5],
              [2, 8, 7]])
# Trace of matrix A
print("Trace of A:", np.trace(A))

# Determinant of a matrix
print("\nDeterminant of A:", np.linalg.det(A))

# Inverse of matrix A
print("\nInverse of A:\n", np.linalg.inv(A))

# Matrix A raised to power 3
print("\nMatrix A raised to power 3:\n",
           np.linalg.matrix_power(A, 3))

''' *******************************************
    ****************** torch ****************** 
    *******************************************'''
# Convert numpy array to PyTorch tensor method 1
tensor_c1 = torch.Tensor(c)
print("Converted numpy array to PyTorch tensor method 1 :\n",tensor_c1)

# Convert numpy array to PyTorch tensor method 2
tensor_c2 = torch.from_numpy(c)
print("Converted numpy array to PyTorch tensor method 2 :\n",tensor_c2)

# Print the type of tensor_c
print("The type of tensor_c1 is :", type(tensor_c1))

print("The type of tensor_c2 is :", type(tensor_c2))

print('-'*60)

# Getting size of tensor
print("The size of the tensor tensor_c1 : ",tensor_c1.size())

print('-'*60)

# Resize tensor tensor_c1 from 2x2 to 4x1
resized_c1 = tensor_c1.view(4)
print("The resized tensor resized_c1 :\n",resized_c1)
print("The size of the tensor resized_c1 : ",resized_c1.size())

print('-'*60)

# ones matrix
print ("ones matrix:\n",torch.ones((2, 2)))

# zeros matrix
print ("zeros matrix:\n",torch.zeros((2, 2)))

# Create 2x2 tensor of random numbers
print ("tensor of random numbers:\n",torch.rand(2, 2))

print('-'*60)

# matrix (rank 2 tensor) multiplication 
M = torch.Tensor([[1, 2, 3], [1, 2, 3]]).view(-1, 2)  # resize or reshape the tensor from (2x3) to (3x2)
print("The matrix M =\n",M)

L = torch.Tensor([[2, 1]]).view(2, -1) # resize or reshape the tensor from (1x2) to (2x1)
print("The matrix L =\n",L)

ML1 = M.mm(L) # computes A.B ( mm == matrix multiplication)

print("matrix multiplication ML1 =\n",ML1)    # the size of ML1 = [3,1]
# or
ML2 = torch.mm(M, L)
print("matrix multiplication ML2 =\n",ML2)    # the size of ML2 = [3,1]
# or
ML3 = torch.matmul(M, L)
print("matrix multiplication ML3 =\n",ML3)    # the size of ML3 = [3,1]
# or, even simpler
ML4 = M @ L # Python 3.5+
print("matrix multiplication ML4 =\n",ML4)    # the size of ML3 = [3,1]